#!/usr/bin/env perl
# PODNAME: echelon
# ABSTRACT: script to add and remove things from Echelon

=head1 SYNOPSIS

    # to get full help use
    >  echelon --help

    for simple (push/pop) queues

    # add a message to the simple queue
    > echelon -q work --type=simple "process /some/file/path"

    # take a message from the queue, message data is printed to STDOUT prefixed with "queuename:"
    > echelon -q work --type=simple --pop
    >> /echelon/work:process /some/file/path

    for task queues

    # add a message to the work task queue
    > echelon -q work --type=task "process /some/file/path"

    # process an item in a task queue, exit status will determin if it is processed
    # the queue message is passed to the exec command in quotes
    # obviously there are security concerns around doing this, clean your inputs!
    # data is passed to /command/to/run as "queuename:message"
    > echelon -q work --type=task --exec "/command/to/run"

    # peek at work items in a task queue, --type=task is default for a peek
    >  echelon -q work --type=task  --peek --count=10

    # add to queue from output of another process
    # '-' says read from STDIN
    some_script |  echelon -q work --type=task -

    for pubsub queues

    # post/publish a message to a queue
    > echelon -q chatter --type=pubsub "some message"

    # contine to listen to a queue, prints messages to STDOUT prefixed with "queuename:"
    > echelon -q chatter --type=pubsub --listen
    >> /echelon/chatter:some message

=head1 DESCRIPTION

Interface with echelon to perform some simple actions, not quite a replacement for complete
access via the Echelon::Client library

config file is in ~/.echelon

    queue:
      dsn: dbi:SQLite:/tmp/echelon.sqlite
      user:
      password:

The queue entry holds information about the queue database that you want to connect to, this is
obviously a perl DBI style connection, connections allowed for mysql, postgresql or sqlite

=cut

#
# (c) Kevin Mulholland, moodfarm@cpan.org
# this code is released under the Perl Artistic License

# -----------------------------------------------------------------------------

use 5.10.0 ;
use strict ;
use warnings ;
use POSIX qw(strftime) ;
use App::Basis ;
use App::Basis::Config ;
use DBI ;
use Echelon::Queue ;
use Date::Manip::Date ;
use feature 'say' ;
use Lingua::EN::Inflexion ;

# -----------------------------------------------------------------------------

use constant ECHELON      => "$ENV{HOME}/.echelon" ;
use constant FIVE_DAYS    => 5 * 24 * 3600 ;
use constant PEEK_DEFAULT => 10 ;
use constant TASK_SLEEP => 10 ;

# -----------------------------------------------------------------------------

my @qtypes = qw( pubsub simple task) ;

# actions with functions to run, the functions will taken an echelon object and
# a hashref of data items
my %action_map = (
    simple => \&_simple_action,
    task   => \&_task_action,
    pubsub => \&_pubsub_action,
) ;

# -----------------------------------------------------------------------------
sub _simple_action
{
    my ( $ec, $opt ) = @_ ;

    if ( $opt->{pop} ) {
        my $opt->{msg} = $ec->pop() ;
        print "$opt->{msg}->{data}\n" if ( $opt->{msg} ) ;
    } elsif ( $opt->{msg} ) {
        my $id = $ec->push( data => { data => $opt->{msg} } ) ;
        msg_exit( "Could not push message", 1 ) if ( !$id ) ;
    } else {
        msg_exit( "No message to push", 1 ) ;
    }
}

# -----------------------------------------------------------------------------
sub _exec_action
{
    my ( $self, $qname, $record, $params ) = @_ ;

    my $command = "$params->{cmd} '$qname:$record->{data}->{task}'" ;
    verbose("running $command") ;

    my ($resp) = execute_cmd(
        command => $command,
        timeout => 10,
        # child_stdin => $content
    ) ;
    if ( $resp->{exit_code} ) {
        verbose("ERROR ($$resp->{exit_code}): $resp->{merged}") ;
    } else {
        verbose("It worked") ;
    }

    # return 1 to show success
    return !$resp->{exit_code} ;
}

# -----------------------------------------------------------------------------
sub _task_action
{
    my ( $ec, $opt ) = @_ ;

    # get the things out of the way that are information only
    # if asking for size or peeking, then there is no message adding or sending
    if ( $opt->{size} || $opt->{peek} ) {
        my $s = $ec->queue_size() ;
        if ( $opt->{size} ) {
            say inflect "<#n:$s> <N:items> <V:were> found in the queue" ;
        } else {
            if ($s) {
                my $count = 1 ;
                say "-" x 80 ;
                foreach my $msg ( $ec->peek( count => PEEK_DEFAULT ) ) {
                    say $count++ . ":\n$msg->{data}" ;
                    say "-" x 80 ;
                }
            } else {
                say "The queue is empty" ;
            }
        }
    } elsif ( $opt->{exec} ) {
        my $counter = $opt->{count} // 0 ;
        my $processing = 1 ;

        # get next item(s) from echelon, process with the exec command
        # listen either forever or until counter = 0
        while( $processing) {
            my $handled = $ec->process(
                count           => 1,
                callback        => \&_exec_action,
                callback_params => { cmd => $opt->{exec} },
            ) ;
            if( $handled ) {
                $counter -= $handled if(!$opt->{listen});
                verbose( "handled, $counter left") ;
            }
            # determine if we should exit, listen listens forever, otherwise
            # just do the number in the counter
            if( $opt->{listen} || $counter) {
                sleep( TASK_SLEEP) ;
            } else {
                $processing = 0 ; ;
            }
        }  ;
    } elsif ( $opt->{msg} ) {
        my ( $activates, $epoch ) = parse_datetime( $opt->{activates} ) ;
        my $resp = $ec->add(
            data      => { task => $opt->{msg} },
            activates => $activates
        ) ;
    } else {
        verbose("Parameters are required, or message queue is empty") ;
        exit 0 ;
    }
}

# -----------------------------------------------------------------------------
sub _pubsub_action
{
    my ( $ec, $opt ) = @_ ;

    if ( $opt->{listen} ) {
        $ec->subscribe(
            # callback => \&stdout_msg,
            callback => sub {
                my $obj = shift ;
                my ( $queue, $data ) = @_ ;
                say "$queue:$data->{data}->{msg}" ;
            },
            persist => 1
        ) ;
        $ec->listen(
            # datetime     => '2018-12-25',
            listen_delay => 1,
            events       => $opt->{count},
        ) ;
    } else {
        # if we have a message then this should be added to the queue asap
        if ( $opt->{msg} ) {
            my ( $activates, $epoch ) = parse_datetime( $opt->{activates} ) ;
            my $resp = $ec->publish(
                data      => { msg => $opt->{msg} },
                activates => $activates
            ) ;
        } else {
            msg_exit("Parameters are required, or message queue is empty") ;
        }
    }
}


# -----------------------------------------------------------------------------
# always create the datetime strings the same way
sub std_datetime
{
    my ($secs) = @_ ;
    $secs ||= time() ;
    return strftime( "%Y-%m-%d %H:%M:%S UTC", gmtime($secs) ) ;
}

# -----------------------------------------------------------------------------
# convert something like a datetime string or an epoch value into a standardised
# datetime string and epoch value

sub parse_datetime
{
    my ($datetime) = @_ ;
    state $date = Date::Manip::Date->new() ;
    my @ret ;

    if ( !$datetime ) {
        return wantarray ? ( undef, undef ) : undef ;
    } elsif ( $datetime =~ /^\d+$/ ) {
        # assume anything less than five days is a time into the future
        $datetime += time() if ( $datetime <= FIVE_DAYS ) ;
        @ret = ( std_datetime($datetime), $datetime ) ;
    } else {
        # so parse will parse in locale time not as UTC
        $date->parse($datetime) ;
        {
            # if we get a warning about converting the date to a day, there
            # must be a problem with parsing the input date string
            local $SIG{__WARN__} = sub {
                die "Invalid date, could not parse" ;
            } ;
            my $day = $date->printf("%a") ;
        }

        my $d2 = $date->printf("%O %Z") ;
        # reparse the date to get it into UTC, best way I could think of :(
        $date->parse($d2) ;

        # secs_since_1970_GMT is epoch
        @ret = ( std_datetime( $date->secs_since_1970_GMT() ), $date->secs_since_1970_GMT() ) ;
    }

    return wantarray ? @ret : $ret[0] ;
}

# -----------------------------------------------------------------------------
# connect to echelon

sub echelon_connect
{
    my ( $config_file, $qname ) = @_ ;

    die "No config file found" if ( !-f $config_file ) ;

    my $cfg = App::Basis::Config->new(
        filename     => $config_file,
        die_on_error => 1
    ) ;

    my $q = $cfg->get("queue") ;
    die "Could not find valid config in " . ECHELON if ( !$q ) ;

    my ( $dsn, $user, $passwd ) = ( $q->{dsn}, $q->{user}, $q->{password} ) ;

    if ( $dsn =~ /sqlite/i ) {
        # in case we are use HOME or ~ etc in the config
        $dsn =~ s/(dbi:SQLite:)(\$ENV\{HOME\}|~|\$HOME)\//$1$ENV{HOME}\// ;
        # verbose("using DB $dsn") ;
    }

    my $dbh =
        DBI->connect( $dsn, $user, $passwd, { RaiseError => 1, PrintError => 0, AutoCommit => 1 } )
        or die "Could not connect to DB $dsn" ;

    if ( $dsn =~ /SQLite/i ) {
        $dbh->do("PRAGMA journal_mode = WAL") ;
        $dbh->do("PRAGMA synchronous = NORMAL") ;
    }

    # lets have all these script queues start with /echelon
    $qname = "/echelon/$qname" ;
    $qname =~ s|//|/|g ;

    my $queue = Echelon::Queue->new(
        dbh           => $dbh,
        default_queue => $qname,
        debug         => 0,
    ) ;
    return $queue ;
}

# -----------------------------------------------------------------------------
# main

my %opt = init_app(
    help_text => "Perform actions against Echelon
        use perldoc " . get_program() . " to get the setup for the " . ECHELON . " config file",
    help_cmdline => "message to send or '-' to read single message from STDIN",
    options      => {
        'verbose|v' => 'Output useful information',
        'queue|q=s' => { desc => 'queue to add things to', required => 1 },
        'type|t=s'  => {
            desc     => "queue type, one of " . join( ", ", @qtypes ),
            required => 1,
            validate => sub {
                my $q = shift ;
                grep ( /^$q$/i, @qtypes ) ;
            },
        },
        'size|s'    => 'task action: Display the number of unprocessed items in a task queue',
        'peek|p=i'  => { desc => 'task action: Display the next few items in a task queue' },
        'count|c=i' => 'Number of messages to read/process',
        'exec|e=s'  => { desc => "task action: take next valid item from queue and run command", },
        'pop'       => { desc => "simple action: remove an item from the queue" },
        'listen|l' =>
            'pubsub action: Listen for pubsub messages on the queue, use count to limit, default no limit',
        'activates|a=s' =>
            { desc => 'Parsable UTC datetime after which the message should be valid', },
    }
) ;

# we may not have or care about a message
$opt{msg} = join( ' ', @ARGV ) ;

# optionally ready from stdin, allowing piping to script
if ( $opt{msg} eq '-' ) {
    $opt{msg} = "" ;
    foreach (<STDIN>) {
        $opt{msg} .= $_ ;
    }
    # remove any final linefeed
    chomp $opt{msg} ;
}

my $echelonq ;
eval { $echelonq = echelon_connect( ECHELON, $opt{queue} ) ; } ;
if ($@) {
    msg_exit( "Could not connect to echelon: $@", 2 ) ;
}

# perform the appropriate actions for the queue type
$action_map{ $opt{type} }->( $echelonq, \%opt ) ;

